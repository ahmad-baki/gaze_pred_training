# ───────────────────────────────────────────────────────────────────────────────
program: main.py
method: bayes   
metric:
  name: avg_val_distance
  goal: minimize


project: gaze_pred_training       # gaze_pred_training, test
entity: ahmad-baki-karlsruhe-institute-of-technology  # replace with your WandB entity

parameters:
  epochs: 
    value: 130
  # ─ Optimizer selection & params ─────────────────────────────────────────────
  optimizer.type:
    distribution: categorical
    values: ["adam", "adamw", "sgd", "ranger"] 
  optimizer.betas0:
    distribution: uniform
    min: 0.8
    max: 0.999
  optimizer.betas1:
    distribution: uniform
    min: 0.9
    max: 0.9999
  # for SGD
  optimizer.momentum:
    distribution: uniform
    min: 0.5
    max: 0.99
  lr:
    distribution: log_uniform_values
    min: !!float 1e-6
    max: !!float 1e-4
  weight_decay:
    distribution: log_uniform_values
    min: !!float 1e-8
    max: !!float 1e-4

  # ─ Scheduler ────────────────────────────────────────────────────────────────
  scheduler.type:
    distribution: categorical
    values: ["steplr", "cosine", "onecycle", "reduceonplateau"]
  scheduler.step_size:
    distribution: int_uniform
    min: 5
    max: 20
  scheduler.gamma:
    distribution: uniform
    min: 0.1
    max: 0.9
  scheduler.patience:
    distribution: int_uniform
    min: 2
    max: 10            # only used for reduceonplateau
  scheduler.max_lr:
    distribution: log_uniform_values
    min: !!float 1e-5
    max: !!float 1e-1          # only for onecycle

  # ─ Regularization & loss ──────────────────────────────────────────────────
  dropout:
    distribution: uniform
    min: 0.0
    max: 0.5
  # label_smoothing:
  #   distribution: uniform
  #   min: 0.0
  #   max: 0.2

  # ─ Gradient clipping ──────────────────────────────────────────────────────
  gradient_clip_max_norm:
    distribution: uniform
    min: 0.5
    max: 2.0

  # ─ Data / batch ────────────────────────────────────────────────────────────
  batch_size:
    distribution: categorical
    values: [256, 512, 1024]
  sampler:
    distribution: categorical
    values: ["random_sampler", "weighted_random_sampler"]
  # alpha is only used when sampler is WeightedRandomSampler
  alpha:
    distribution: uniform
    min: 0.1
    max: 1.0

# --- Torch Sampler configurations for Hydra initialization ---


# Usage example in code:
# sampler = hydra.utils.instantiate(config.samplers[config.defaults[0].sampler])

command:
  - ${env}
  - python
  - ${program}
  - ${args_no_hyphens}